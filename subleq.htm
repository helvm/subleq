<!DOCTYPE html>
<html lang="en">
<head>
	<title>SUBLEQ eForth</title>
	<meta charset="UTF-8">
	<style type="text/css">
		body{margin:40px auto;max-width:50%;line-height:1.6;font-size:18px;color:#444;padding:0 10px}
		h1,h2,h3{line-height:1.2}
		pre { white-space: pre-wrap; }
		.tab { overflow: hidden; border: 1px solid #ccc; background-color: #f1f1f1; }
		.tab button { background-color: inherit; float: left; border: none; outline: none; cursor: pointer; padding: 14px 16px; transition: 0.3s; }
		.tab button:hover { background-color: #ddd; }
		.tab button.active { background-color: #ccc; } 
		.tabcontent { display: none; padding: 6px 12px; border: 1px solid #ccc; border-top: none; } 
		.blink { animation: blinker 0.6s linear infinite; color: #1c87c9; font-size: 30px; font-weight: bold; font-family: sans-serif; }
		@keyframes blinker { 50% { opacity: 0; } }
	</style>
</head>
<body>
	<!-- TODO: better image loading, delete key handling, cleanup code, only active on correct tab, 
	 make an unstyled minimalistic version? */
	<!--<object id="image" type="text/html" data="subleq.dec">-->
	<div class="tab">
		<button class="tablinks" onclick="openTab(event, 'subleq')">subleq</button>
		<button class="tablinks" onclick="openTab(event, 'help')">help</button>
		<button class="tablinks" onclick="openTab(event, 'about')">about</button>
	</div>

	<div id="subleq" class="tabcontent"> </div>
	<div id="help"   class="tabcontent">
		This system contains a <a href=" https://en.wikipedia.org/wiki/One-instruction_set_computer">SUBLEQ</a> 
		virtual machine that will automatically boot an eForth image, which is a variant of 
		<a href="https://en.wikipedia.org/wiki/Forth_(programming_language)">Forth</a>, a stack
		based programming language suitable for constrained system. A Forth tutorial is beyond
		this help section. However, here are a few commands you can type into the system
		to get started:

		<pre> words </pre>

		This will print out a list of all of the built in functions defined in Forth.

		<pre> 2 2 + . cr </pre>

		Add two numbers together, both 2, and print the result, 4 along with a carriage return.

		<pre> : ahoy cr ." Hello, World!" ; </pre>

		Define a new word (functions are called "words" in Forth) named "ahoy", which when
		called like so:

		<pre> ahoy </pre>

		Will print the standard greeting. If the Forth interpreter is happy, "ok" will be
		printed out after entering each line. Be careful, white-space matters a lot in Forth.

		<p> You can hit ESC to clear the screen. </p>
		<p> Happy hacking! </p>
	</div>
	<div id="about" class="tabcontent"> 
		<table style="width:100%">
			<tr> <th>Author</th> <td>Richard James Howe</td> </tr>
			<tr> <th>Project</th> <td>eForth running on SUBLEQ</td> </tr>
			<tr> <th>Email</th> <td><a href="mailto:howe.r.j.89@gmail.com?subject=eForth SUBLEQ">howe.r.j.89@gmail.com</a></td> </tr>
			<tr> <th>Repo</th> <td><a href="https://github.com/howerj/subleq">https://github.com/howerj/subleq</a></td> </tr>
			<tr> <th>License</th> <td>The Unlicense / Public Domain</td> </tr>
		</table> 
	</div>
	<canvas id="keydown"></canvas>
	<script type="text/javascript">
		function openTab(evt, name) {
			var tabcontent = document.getElementsByClassName("tabcontent");
			for (var i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = "none"; }
			var tablinks = document.getElementsByClassName("tablinks");
			for (var i = 0; i < tablinks.length; i++) { tablinks[i].className = tablinks[i].className.replace(" active", ""); }
			document.getElementById(name).style.display = "block";
			evt.currentTarget.className += " active";
		}

		/* NB. It would be possible to use a regex over the text to perform syntax highlighting of the Forth typed in,
		it would need to be kept separate from the display HTML though */
		var file = "https://raw.githubusercontent.com/howerj/subleq/master/subleq.dec"
		var screen = "", input = "", cursor = '<b class="blink">_</b>';
		var pc = 0, m = new Uint16Array(65536);

		function esc(i) {
			i = i.replace(/&/g, '&amp;');
			i = i.replace(/</g, '&lt;');
			i = i.replace(/>/g, '&gt;');
			return i;
		}

		function draw() { 
			document.getElementById('subleq').innerHTML = "<pre>" + esc(screen) + cursor + "</pre>";
			window.scrollTo(0, document.body.scrollHeight);
		}

		document.documentElement.addEventListener('keydown', function (e) {
			var key = e.key;
			switch (key) {
			case "Enter": key = '\n'; break;
			case "Escape": screen = ""; draw(); return false; break;
			case "Delete": /* fall-through */
			case "Backspace": 
				key = '\u0008';
				let last = screen.slice(-1);
				if (last != '\n' && last != '\r')
					screen = screen.substring(0, screen.length - 1);
				break;
			default:
				if (key.length != 1) return false;
				break;
			}
			input += key;
			if (key != '\u0008')
				screen += key;
			draw();
			return false; 
		}, false);

		function subleq() {
			while ((pc & 0x8000) == 0) {
				var a = m[pc+0];
				var b = m[pc+1];
				var c = m[pc+2];
				if (a == 0xFFFF) { 
					if (input.length != 0) {
						m[b] = input.charCodeAt(0);
						input = input.substring(1);
					} else {
						setTimeout(subleq, 20);
						return;
					}
					pc += 3;
				} else if (b == 0xFFFF) {
					var o = String.fromCharCode(m[a]);
					if (o == '\u0008') {
						let last = screen.slice(-1);
						if (last != '\n' && last != '\r')
							screen = screen.substring(0, screen.length - 1);
					} else {
						screen += o;
					}
					draw();
					pc += 3;
				} else {
					var d = m[b] - m[a];
					m[b] = d;
					if ((d & 0x8000) != 0 || d == 0) pc = c;
					else pc += 3;
				}
			}
			window.location.reload();
		}

		console.log("loading file: " + file);
		var t = fetch(file).then(r => r.text()).then(t => {
			var txt = t.split(/[\r?\n]/g);
			for (var i = 0; i < 65536; i++) {
				if (undefined == txt[i]) {
					m[i] = 0;
				} else {
					m[i] = parseInt(txt[i]);
				}
			}
			screen += "EFORTH LOADED\n"
			draw();
			subleq();
		});
	</script>
</body>
</html>
